public class Solution {
public ArrayList<Integer> order(ArrayList<Integer> heights, ArrayList<Integer> infronts) {
	    ArrayList<Integer> result = new ArrayList(Collections.nCopies(heights.size(), (Integer)null));
	    
	    ArrayList<Pair> input = new ArrayList<Pair>(heights.size());
	    for(int i = 0; i < heights.size(); i++) {
	        input.add(new Pair(heights.get(i), infronts.get(i)));
	    }
	    
	    Collections.sort(input);
	    
	    for(int i = 0; i < input.size(); i++) {
	        Pair p = input.get(i);
	        int j = 0;
	        int count = 0;
	        while(count < p.infront) {
	            if(result.get(j) == null) {
	                count++;
	            }
	            j++;
	        }
	        while(result.get(j) != null) j++;
	        result.set(j, p.height);
	    }
	    
	    return result;
	}
	
	private class Pair implements Comparable<Pair> {
	    private int height;
	    private int infront;
	    private Pair(int h, int i) {
	        height = h;
	        infront = i;
	    }
	    
	    public int compareTo(Pair other) {
	        return this.height - other.height;
	    }
	}
}
