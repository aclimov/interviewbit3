/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
	public ArrayList<Integer> recoverTree(TreeNode a) {
	    
	   
	   Deque<TreeNode> s = new LinkedList();
	   
	   ArrayList<Integer> res = new ArrayList();
	   
	   
	   TreeNode cur = a;
	   while(cur!=null) {
	       s.addFirst(cur);
	       cur= cur.left;
	   }
	   
	   while(!s.isEmpty()){
	       TreeNode t = s.pop();
	       //need to find next node and compare
	       cur = t.right;
	       while(cur!=null){
	            s.addFirst(cur);
	            cur= cur.left;
	        }
	        
	        if(!s.isEmpty()){
	            TreeNode next = s.getFirst();
	            if(next.val<t.val){
	                if(res.size()==0){
	                    res.add(next.val);
	                    res.add(t.val);
	                }else{
	                    res.set(0,next.val);
	                }
	            }
	        }
	           
	       
	   }
	   
	   return res;
	   
	   
	}
	
}
