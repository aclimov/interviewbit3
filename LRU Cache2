public class Solution {
    
    class Node{
        public int val;
        public int key;
        public Node next;
        public Node prev;
        
        public Node(int k,int v){
            key = k;
            val = v;
        }
    }
    
    Node head;
    Node tail;
    HashMap<Integer,Node> map=null;
    int cap;
    public Solution(int capacity) {
        map = new HashMap<Integer,Node>();
        cap = capacity;
    }
    
    public int get(int key) {
        if(!map.containsKey(key)){
            return -1;
        }
        Node t = map.get(key);
        updateHead(t);
        return t.val;
    }
    
    public void updateHead(Node n){
        if(head==null){
            head = n;
            tail = n;
        }else if(tail==head){
               n.next = head;
               tail.prev = n;
               head = n;
            }
        else
        {
            if(tail==n){
                Node prev = tail.prev;
                if(prev!=null){
                    prev.next = null;
                }
                tail = prev;
            }
                        
            if(head!=n){
                Node prev = n.prev;
                if(prev!=null){
                    prev.next = n.next;
                    if(n.next!=null){
                        n.next.prev = prev;
                    }
                }
                n.next = head;
                head.prev = n;
                head = n;
            }
        }
    }
    
    public void checkCap(){
        if(cap==map.size()){
          
            if(tail!=null){
              //  System.out.println("b");
                map.remove(tail.key);
                Node prev = tail.prev;
                if(prev!=null){
                    prev.next = null;
                }
                tail = prev;
                
            }
            if(tail==null){
                head = null;
            }
        }
    }
    
    public void set(int key, int value){
        
        Node n=null;
        if(map.containsKey(key)){
             n = map.get(key);
             n.val = value;
        }else{
            checkCap();
            n = new Node(key,value);
        }
        updateHead(n);
        map.put(key,n);
    }
}
