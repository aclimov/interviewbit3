public class Solution {
    public int findMedian(ArrayList<ArrayList<Integer>> A) {
        
        int min=Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;
        int n = A.size();
        int m = A.get(0).size();
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                min = Math.min(min,A.get(i).get(j));
                max = Math.max(max,A.get(i).get(j));
            }
        }
        
        int l = min;
        int r = max;
        
        int h = (n*m)/2;
        h+=1;
        while(min<=max){
            int mid = min+(max-min)/2;
            
            //get count if count==-1 means no such number exists in array?
            int count=0;
            for(ArrayList<Integer> a:A){
                int c = getCount(a,mid);
                if(c>-1){
                    count+=c;
                }
            }
           
            //if(count<) half  min=mid+1
            if(count<h){
                min = mid+1;
                
            }else{
                max = mid-1;
            }
        }
        return min;
        
    }
    
    int getCount(ArrayList<Integer> a, int x){
        int l=0;
        int r = a.size()-1;
        
        while(l<=r){
            int mid = l+(r-l)/2;
            if(a.get(mid)==x&&(mid+1 ==a.size()||a.get(mid+1)>x)){
                return mid+1;
            }
            if(a.get(mid)<=x){
                l=mid+1;
            }else{
                r = mid-1;
            }
        }
        
        return l;
    }
}
